getmatrix=getmatrix)
}
## cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x=matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
## makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m<<- solve
getmatrix <- function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x=matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
f <- file.path(getwd(), "jeff.jpg")
download.file(url, f, mode = "wb")
img <- readJPEG(f, native = TRUE)
quantile(img, probs = c(0.3, 0.8))
install.packages("jpeg")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
f <- file.path(getwd(), "jeff.jpg")
download.file(url, f, mode = "wb")
img <- readJPEG(f, native = TRUE)
quantile(img, probs = c(0.3, 0.8))
library(jpeg)
?readJPEG
??readJPEG
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
f <- file.path(getwd(), "jeff.jpg")
download.file(url, f, mode = "wb")
img <- readJPEG(f, native = TRUE)
quantile(img, probs = c(0.3, 0.8))
utils:::menuInstallPkgs()
library(lubridate)
library()
q()
git clone https://github.com/bcaffo/courses.git
gitclone
git
pdf(file="my.pdf")
with(faithfull, plot(eruptions, waiting))
library(datasets)
with(faithfull, plot(eruptions, waiting))
with(faithfull, plot(eruptions, waiting))
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
text()
?text
?lines
?points
?llines
library(ggplot2)
install.packages("ggplot2")
qplot
qplot()
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
?qplot
qplot
## this function reads the required data and does some preprocessing to the data
readData <- function(){
# get the initial time of this dataset
initial <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, nrows = 1)
initialTime <- paste(initial$Date, initial$Time)
initialTime <- strptime(initialTime, "%d/%m/%Y %H:%M:%S")
# the begin time and end time of the required data
beginTime <- strptime("01/02/2007", "%d/%m/%Y")
endTime <- strptime("03/02/2007", "%d/%m/%Y")
# calculate how many rows should be skipped when reading data
skip <- as.numeric(beginTime - initialTime)*24*60
# calculate how many rows should be read into memory
nrows <- as.numeric(endTime - beginTime)*24*60
# read data and convert Date and Time columns to proper classes
data <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, nrows = nrows, skip = skip, na.strings = "?", col.names = names(initial))
data$Time <- paste(data$Date, data$Time)
data$Date <- as.Date(data$Date, "%d/%m/%Y")
data$Time <- strptime(data$Time, "%d/%m/%Y %H:%M:%S")
data
}
png(filename = "plot3.png", width = 480, height = 480)
with(data, {
plot(Time, Sub_metering_1, type = "l", col = "black", ylab = "Energy sub metering", xlab = "")
lines(Time, Sub_metering_2, col = "red")
lines(Time, Sub_metering_3, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), legend = names(data[,7:9]), lty = "solid")
dev.off()
png(filename = "plot3.png", width = 480, height = 480)
with(data, {
plot(Time, Sub_metering_1, type = "l", col = "black", ylab = "Energy sub metering", xlab = "")
lines(Time, Sub_metering_2, col = "red")
lines(Time, Sub_metering_3, col = "blue")
})
with(data, {
plot(Time, Sub_metering_1, type = "l", col = "black", ylab = "Energy sub metering", xlab = "")
lines(Time, Sub_metering_2, col = "red")
lines(Time, Sub_metering_3, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), legend = names(data[,7:9]), lty = "solid")
dev.off()
png(filename = "plot3.png", width = 480, height = 480)
with(data, {
plot(Time, Sub_metering_1, type = "l", col = "black", ylab = "Energy sub metering", xlab = "")
lines(Time, Sub_metering_2, col = "red")
lines(Time, Sub_metering_3, col = "blue")
})
legend("topright", col = c("black", "red", "blue"), legend = names(data[,7:9]), lty = "solid")
dev.off()
png(filename = "plot1.png", width = 480, height = 480)
hist(data$Global_active_power, xlab = "Global Active Power (kilowatts)", col = "red", main = "Global Active Power")
dev.off()
png(filename = "plot1.png", width = 480, height = 480)
hist(data$Global_active_power, xlab = "Global Active Power (kilowatts)", col = "red", main = "Global Active Power")
dev.off()
this function reads the required data and does some preprocessing to the data
readData <- function(){
# get the initial time of this dataset
initial <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, nrows = 1)
initialTime <- paste(initial$Date, initial$Time)
initialTime <- strptime(initialTime, "%d/%m/%Y %H:%M:%S")
# the begin time and end time of the required data
beginTime <- strptime("01/02/2007", "%d/%m/%Y")
endTime <- strptime("03/02/2007", "%d/%m/%Y")
# calculate how many rows should be skipped when reading data
skip <- as.numeric(beginTime - initialTime)*24*60
# calculate how many rows should be read into memory
nrows <- as.numeric(endTime - beginTime)*24*60
# read data and convert Date and Time columns to proper classes
data <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, nrows = nrows, skip = skip, na.strings = "?", col.names = names(initial))
data$Time <- paste(data$Date, data$Time)
data$Date <- as.Date(data$Date, "%d/%m/%Y")
data$Time <- strptime(data$Time, "%d/%m/%Y %H:%M:%S")
data
}
data <- readData()
# plot figure into file
png(filename = "plot4.png", width = 480, height = 480)
par(mfrow = c(2,2))
with(data, {
# plot (1,1)
plot(Time, Global_active_power, ylab = "Global Active Power", xlab = "", type = "l")
# plot (1,2)
plot(Time, Voltage, xlab = "datetime", ylab = "Voltage", type = "l")
# plot (2,2)
plot(Time, Sub_metering_1, type = "l", col = "black", ylab = "Energy sub metering", xlab = "")
lines(Time, Sub_metering_2, col = "red")
lines(Time, Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"), legend = names(data[,7:9]), lty = "solid", bty = "n")
# plot (2,2)
plot(Time, Global_reactive_power, xlab = "datetime", type = "l")
})
dev.off()
data <- readData()
# plot figure into file
png(filename = "plot4.png", width = 480, height = 480)
par(mfrow = c(2,2))
with(data, {
# plot (1,1)
plot(Time, Global_active_power, ylab = "Global Active Power", xlab = "", type = "l")
# plot (1,2)
plot(Time, Voltage, xlab = "datetime", ylab = "Voltage", type = "l")
# plot (2,2)
plot(Time, Sub_metering_1, type = "l", col = "black", ylab = "Energy sub metering", xlab = "")
lines(Time, Sub_metering_2, col = "red")
lines(Time, Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"), legend = names(data[,7:9]), lty = "solid", bty = "n")
# plot (2,2)
plot(Time, Global_reactive_power, xlab = "datetime", type = "l")
})
dev.off()
data <- readData()
# plot figure into file
png(filename = "plot4.png", width = 480, height = 480)
par(mfrow = c(2,2))
with(data, {
# plot (1,1)
plot(Time, Global_active_power, ylab = "Global Active Power", xlab = "", type = "l")
# plot (1,2)
plot(Time, Voltage, xlab = "datetime", ylab = "Voltage", type = "l")
# plot (2,2)
plot(Time, Sub_metering_1, type = "l", col = "black", ylab = "Energy sub metering", xlab = "")
lines(Time, Sub_metering_2, col = "red")
lines(Time, Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"), legend = names(data[,7:9]), lty = "solid", bty = "n")
# plot (2,2)
plot(Time, Global_reactive_power, xlab = "datetime", type = "l")
})
dev.off()
install.packages("MicTeX")
Sys.which("pdflatex")
C:\\miktex\\miktex\\bin\\pdflatex.exe
install.packages("MicTeX")
install.packages("C:\\Program Files (x86)\\MIKTEX~1.9\\miktex\\bin\\pdflatex.exe")
install.packages("miktex")
options(rpubs.upload.method = "internal")
library("rmarkdown", lib.loc="~/R/win-library/3.1")
library("RCurl", lib.loc="~/R/win-library/3.1")
library("bitops", lib.loc="~/R/win-library/3.1")
library("rmarkdown", lib.loc="~/R/win-library/3.1")
library("RCurl", lib.loc="~/R/win-library/3.1")
ibrary(knitr)
library(markdown)
knit("PA2_template.Rmd")
markdownToHTML("PA2_template.md", "PA2_template.html")
library(knitr)
library(markdown)
knit("PA2_template.Rmd")
markdownToHTML("PA2_template.md", "PA2_template.html")
1:10
1:100
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(w*x)/sum(w)
library(datasets)
data(mtcars)
mtcars$mpg
yc <- mtcars$mpg - mean(mtcars$mpg)
xc <- mtcars$wt - mean(mtcars$wt)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(mtcars$mpg ~ mtcars$wt))[2])
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
yc <- y - mean(y)
xc <- x - mean(x)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xn <- (x - mean(x))/sd(x)
xn[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm(x~1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
yc <- y - mean(y)
xc <- x - mean(x)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
B1=Cor(Y,X)Sd(Y)/Sd(X) Sd(X) is one half of Sd(Y) Let Sd(Y) = 1 Sd(X) = 0.5 Cor(Y,X) = 0.5 B1=0.51/0.5
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
ibrary(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
? r
? {r}
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("AppliedPredictiveModeling")
install.packages("Segmentationoriginal")
install.packages("segmentationOriginal")
install.packages("caret")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
train <- (segmentationOriginal$case="Train")
head(train)
train <- (segmentationOriginal$Case="Train")
head(train)
segmentationOriginal$Case
train <- (segmentationOriginal, segmentationOriginal$Case="Train")
train <- (segmentationOriginal[Case]"Train")
train <- segmentationOriginal[segmentationOriginal$Case =='Train', ]
head(train)
test <- segmentationOriginal[segmentationOriginal$Case =='Test', ]
head(test)
test <- segmentationOriginal[segmentationOriginal$Case =='Test', ]
test
test <- subset(segmentationOriginal,Case =='Test')
test
test <- subset(segmentationOriginal,Case =='Train')
test <- subset(segmentationOriginal,Case =="Test")
shiny::runApp('C:/Users/admin/Desktop/Developing Data Products')
setwd("C:/Users/admin/Desktop/Developing Data Products")
shiny::runApp()
shiny::runApp()
barplot(dataInput()[,input$energy],
main=paste(input$energy, "in", input$year),
ylab="Consumption (in EUR)", ylim=c(0,80),
xlab="Weeks (Jan to Dec)")
library(shiny)
data <- read.csv("consumption.csv", sep=",", header=T)
colnames(data)[4] <- "Gas"
colnames(data)[7] <- "Electricity"
colnames(data)[10] <- "Water"
## Define a server for the Shiny app
shinyServer(function(input, output) {
dataInput <- reactive({
subset(data, select=c(input$energy), subset=(substring(data$Date,1,4) == input$year))
})
## Fill in the spot we created for a plot
output$plot1 <- renderPlot({
## Render a barplot
barplot(dataInput()[,input$energy],
main=paste(input$energy, "in", input$year),
ylab="Consumption (in EUR)", ylim=c(0,80),
xlab="Weeks (Jan to Dec)")
})
})
library(shiny)
# Define the overall UI
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
# Give the page a title
titlePanel("Price of Gas / Electricity / Water Consumption over one year"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("energy", "Type of energy:",
choices=c("Gas", "Electricity", "Water")),
selectInput("year", "Year:",
choices=c("2012", "2013", "2014")),
hr(),
helpText("Data from my renovated house (since 2012).", br(),
"Select the type of energy and the year to get the appropriate bar plot.")),
# Create a spot for the barplot
mainPanel(
plotOutput("plot1")))))
library(shiny)
# Define the overall UI
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
# Give the page a title
titlePanel("Price of Gas / Electricity / Water Consumption over one year"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("energy", "Type of energy:",
choices=c("Gas", "Electricity", "Water")),
selectInput("year", "Year:",
choices=c("2012", "2013", "2014")),
hr(),
helpText("Data from my renovated house (since 2012).", br(),
"Select the type of energy and the year to get the appropriate bar plot.")),
# Create a spot for the barplot
mainPanel(
plotOutput("plot1")))))
shiny::runApp()
shiny::runApp()
library(shiny)
data <- read.csv("consumption.csv", sep=",", header=T)
colnames(data)[4] <- "Gas"
colnames(data)[7] <- "Electricity"
colnames(data)[10] <- "Water"
## Define a server for the Shiny app
shinyServer(function(input, output) {
dataInput <- reactive({
subset(data, select=c(input$energy), subset=(substring(data$Date,1,4) == input$year))
})
## Fill in the spot we created for a plot
output$plot1 <- renderPlot({
## Render a barplot
barplot(dataInput()[,input$energy],
main=paste(input$energy, "in", input$year),
ylab="Consumption (in EUR)", ylim=c(0,80),
xlab="Weeks (Jan to Dec)")
})
})
barplot(dataInput()[,input$energy],
main=paste(input$energy, "in", input$year),
ylab="Consumption (in EUR)", ylim=c(0,80),
xlab="Weeks (Jan to Dec)")
dataInput <- reactive({
subset(data, select=c(input$energy), subset=(substring(data$Date,1,4) == input$year))
})
output$plot1 <- renderPlot
shiny::runApp()
shiny::runApp()
data <- read.csv("consumption.csv", sep=",", header=T)
colnames(data)[4] <- "Gas"
colnames(data)[7] <- "Electricity"
colnames(data)[10] <- "Water"
head(data)
shinyServer(function(input, output) {
dataInput <- reactive({
subset(data, select=c(input$energy), subset=(substring(data$Date,1,4) == input$year))
})
output$plot1 <- renderPlot({
## Render a barplot
barplot(dataInput()[,input$energy],
main=paste(input$energy, "in", input$year),
ylab="Consumption (in EUR)", ylim=c(0,80),
xlab="Weeks (Jan to Dec)")
})
})
output$plot1 <- renderPlot
shiny::runApp()
shiny::runApp()
library(slidify)
install.packages("slidify")
library("devtools")
install_github('slidify', 'ramnathv'')
''
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
author("BMI")
library(slidify)
author("BMI")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
publish(title = 'BMI', 'index.html', host = 'rpubs')
publish(title = 'BMI', 'index.html', host = 'rpubs')
publish(title = 'BMI', 'index.html', host = 'rpubs')
publish(title = 'BMI', 'index.html', host = 'rpubs')
publish(title = 'BMI', 'index.html', host = 'rpubs')
publish(title = 'BM', 'index.html', host = 'rpubs')
slidify("index.rmd")
publish(title = 'BMI', 'index.html', host = 'rpubs')
publish(title = 'BMI', 'index.html', host = 'rpubs')
slidify("index.rmd")
slidify("index.rmd")
publish(title = 'BMI', 'index.html', host = 'rpubs')
setwd("C:/Users/admin/Desktop/Developing Data Products/p")
publish(title = 'BMI', 'index.html', host = 'rpubs')
